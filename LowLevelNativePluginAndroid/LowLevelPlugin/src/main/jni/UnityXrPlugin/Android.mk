#########
# Defines the plugin that was already generated by LowLevelPlugin as a library that has already been built.
# We've defined the module in its own Android.mk file, but unfortunately I haven't found an easy way to reference it.
# The best thing to do is redefine it as a module that's already been built here and then reference it in the actual module that we are building.
#########

# This variable indicates the location of the source files in the development tree.
# Here, the macro function my-dir, provided by the build system, returns the path of the
# current directory (the directory containing the Android.mk file itself).
LOCAL_PATH := $(call my-dir)

# This variable points to a build script that un-defines nearly all LOCAL_XXX variables listed below.
# Use this variable to include this script before describing a new module. The syntax for using it is:
include $(CLEAR_VARS)

# Stores the name of the module that you to define.
# (Used to reference this library throughout the Android Studio project
LOCAL_MODULE := UnityXrPlugin

# The cpp files that are compiled into the module
LOCAL_SRC_FILES := android_logbuffer.cpp native_to_unity_notifiers.cpp xr_plugin_entry_point.cpp

LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)

LOCAL_EXPORT_CFLAGS := -DUNITYXRPLUGIN=1

# Defines which libraries to dynamically link into this module.
# This variable contains the list of additional linker flags for use in building your shared library
# or executable. It enables you to use the -l prefix to pass the name of specific system libraries.
LOCAL_LDLIBS := -L$(SYSROOT)/usr/lib -llog -lEGL -lGLESv3

# If NDK_DEBUG is 1, then we are targeting a debug build.
ifeq ($(NDK_DEBUG), 1)
    cmd-strip :=
endif

# The BUILD_SHARED_LIBRARY variable points to a GNU Makefile script that collects all
# the information you defined in LOCAL_XXX variables since the most recent include.
# This script determines what to build, and how to do it.
include $(BUILD_SHARED_LIBRARY)

# Allows you to find and include a module's Android.mk file by the name of the module.
$(call import-module, android/native_app_glue)
